function DataAdapter(a) {
    this.async = !0, this.url = null, this.token = null, this.proposal = null, this.username = null, 
    this.onSuccess = new Event(this), this.onError = new Event(this), null != a && (null != a.username && (this.username = a.username), 
    null != a.async && (this.async = a.async), null != a.onSuccess && this.onSuccess.attach(a.onSuccess), 
    null != a.onError && this.onError.attach(a.onError), null != a.url && (this.url = a.url), 
    null != a.token && (this.token = a.token), null != a.proposal && (this.proposal = a.proposal));
}

function Event(a) {
    this._sender = a, this._listeners = [];
}

function ExiDataAdapter(a) {
    this.async = !0, this.onSuccess = new Event(this), this.onError = new Event(this), 
    null != a && (null != a.async && (this.async = a.async), null != a.onSuccess && this.onSuccess.attach(a.onSuccess), 
    null != a.onError && this.onError.attach(a.onError));
}

function ExiDataAdapterGroup(a) {
    this.offline = new ExiDataAdapter(a);
}

function AutoProcIntegrationDataAdapter(a) {
    DataAdapter.call(this, a);
}

function CrystalDataAdapter(a) {
    DataAdapter.call(this, a);
}

function DataCollectionDataAdapter(a) {
    DataAdapter.call(this, a);
}

function MxDataAdapterFactory(a) {
    this.proposal = new ProposalDataAdapterGroup(a), this.mx = new MxDataAdapterGroup(a), 
    this.saxs = new SaxsDataAdapterGroup(a), this.exi = new ExiDataAdapterGroup(a);
}

function MxDataAdapterGroup(a) {
    this.autoProcIntegrationDataAdapter = new AutoProcIntegrationDataAdapter(a), this.dataCollection = new DataCollectionDataAdapter(a), 
    this.crystal = new CrystalDataAdapter(a), this.protein = new ProteinDataAdapter(a), 
    this.workflowStepDataAdapter = new WorkflowStepDataAdapter(a);
}

function ProteinDataAdapter(a) {
    DataAdapter.call(this, a);
}

function WorkflowStepDataAdapter(a) {
    DataAdapter.call(this, a);
}

function AuthenticationDataAdapter(a) {
    DataAdapter.call(this, a);
}

function DataAdapterFactory(a) {
    this.proposal = new ProposalDataAdapterGroup(a);
}

function DewarDataAdapter(a) {
    DataAdapter.call(this, a);
}

function ProposalDataAdapter(a) {
    DataAdapter.call(this, a);
}

function ProposalDataAdapterGroup(a) {
    this.authentication = new AuthenticationDataAdapter(a), this.dewar = new DewarDataAdapter(a), 
    this.proposal = new ProposalDataAdapter(a), this.shipping = new ShippingDataAdapter(a), 
    this.session = new SessionDataAdapter(a);
}

function SessionDataAdapter(a) {
    DataAdapter.call(this, a);
}

function ShippingDataAdapter(a) {
    DataAdapter.call(this, a);
}

function ProposalManager() {}

function BufferSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

function DataCollectionSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

function Experiment(a) {
    this.json = a, this.onSaved = new Event(this), this.onError = new Event(this), this.name = a.name, 
    this.experimentId = a.experimentId, this.creationDate = a.creationDate, this.onPlateSaved = new Event(this), 
    this.bufferColors = $.extend({}, EXI.proposalManager.getBufferColors()), this.specimenBuffersColors = this.getSpecimenColors();
    for (var b in this.bufferColors) this.bufferColors[b] = "black";
    this.setMacromoleculesColors();
}

function ExperimentList(a) {
    this.experiments = a, this.macromoleculeColors = {};
    for (var b = 0; b < a.length; b++) this.macromoleculeColors = $.extend({}, this.macromoleculeColors, a[b].macromoleculeColors);
}

function ExperimentSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

function FrameSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

function HPLCSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

function MacromoleculeSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

function MeasurementSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

function ModelSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

function SaxsDataAdapterFactory(a) {
    this.proposal = new ProposalDataAdapterGroup(a), this.mx = new MxDataAdapterGroup(a), 
    this.saxs = new SaxsDataAdapterGroup(a), this.exi = new ExiDataAdapterGroup(a);
}

function SaxsDataAdapterGroup(a) {
    this.experiment = new ExperimentSaxsDataAdapter(a), this.buffer = new BufferSaxsDataAdapter(a), 
    this.macromolecule = new MacromoleculeSaxsDataAdapter(a), this.hplc = new HPLCSaxsDataAdapter(a), 
    this.measurement = new MeasurementSaxsDataAdapter(a), this.specimen = new SpecimenSaxsDataAdapter(a), 
    this.stockSolution = new StockSolutionSaxsDataAdapter(a), this.subtraction = new SubtractionSaxsDataAdapter(a), 
    this.dataCollection = new DataCollectionSaxsDataAdapter(a), this.template = new TemplateSaxsDataAdapter(a), 
    this.frame = new FrameSaxsDataAdapter(a), this.model = new ModelSaxsDataAdapter(a);
}

function SpecimenSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

function StockSolutionSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

function SubtractionSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

function TemplateSaxsDataAdapter(a) {
    DataAdapter.call(this, a);
}

DataAdapter.prototype.getUrl = function(a) {
    return this.url + a.replace("{token}", this.token).replace("{proposal}", this.proposal).replace("{username}", this.username);
}, DataAdapter.prototype.get = function(a) {
    var b = this;
    $.ajax({
        url: this.getUrl(a),
        type: "get",
        async: this.async,
        statusCode: {
            404: function() {
                b.onError.notify("404 : not found");
            },
            415: function() {
                b.onError.notify("415 : type not allowed");
            },
            500: function() {
                b.onError.notify("500 : internal server error");
            }
        },
        success: function(a) {
            b.onSuccess.notify(a);
        },
        error: function(a) {
            b.onError.notify(a);
        }
    });
}, DataAdapter.prototype.post = function(a, b) {
    var c = this;
    a = this.getUrl(a), $.ajax({
        type: "POST",
        url: a,
        data: b,
        success: function(a) {
            c.onSuccess.notify(a);
        },
        error: function(a) {
            c.onError.notify(a);
        }
    });
}, Event.prototype = {
    attach: function(a) {
        this._listeners.push(a);
    },
    notify: function(a) {
        for (var b = 0; b < this._listeners.length; b++) this._listeners[b](this._sender, a);
    }
}, ExiDataAdapter.prototype.getUrl = function(a) {
    var b = EXI.credentialManager.getConnections()[0];
    return b.exiUrl + a.replace("{token}", b.token).replace("{username}", b.username);
}, ExiDataAdapter.prototype.call = function(a) {
    var b = this;
    $.ajax({
        url: this.getUrl(a),
        type: "get",
        success: function(a) {
            b.onSuccess.notify(a), null != exiSAXS && exiSAXS.setLoading(!1);
        },
        error: function(a) {
            b.onError.notify(a), null != exiSAXS && exiSAXS.setError(a);
        }
    });
}, ExiDataAdapter.prototype.postcall = function(a, b) {
    var c = this, d = EXI.credentialManager.getConnections();
    $.ajax({
        url: d[0].exiUrl + a,
        type: "post",
        data: b,
        success: function(a) {
            c.onSuccess.notify(a), null != exiSAXS && exiSAXS.setLoading(!1);
        },
        error: function(a) {
            c.onError.notify(a), null != exiSAXS && exiSAXS.setError(a);
        }
    });
}, ExiDataAdapter.prototype.getToolUrl = function() {
    return this.getUrl("/{token}/tool");
}, ExiDataAdapter.prototype.authenticate = function() {
    this.call("/{token}/user/{username}/authenticate");
}, ExiDataAdapter.prototype.getProject = function() {
    this.call("/{token}/project/list");
}, ExiDataAdapter.prototype.getRuns = function(a) {
    this.call("/{token}/project/{0}/run/list".format([ a ]));
}, ExiDataAdapter.prototype.save = function(a) {
    this.postcall("/{token}/user/save".format([ tokens[0].token ]), {
        user: JSON.stringify(a)
    });
}, ExiDataAdapter.prototype.getFileContent = function(a) {
    this.call("/file/{0}/content".format([ a ]));
}, ExiDataAdapter.prototype.getFileImage = function(a) {
    return this.getUrl("/file/{0}/image".format([ a ]));
}, AutoProcIntegrationDataAdapter.prototype.get = DataAdapter.prototype.get, AutoProcIntegrationDataAdapter.prototype.post = DataAdapter.prototype.post, 
AutoProcIntegrationDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, 
AutoProcIntegrationDataAdapter.prototype.getByDataCollectionId = function(a) {
    this.get("/{token}/proposal/{proposal}/mx/autoprocintegration/datacollection/{0}/list".format([ a ]));
}, AutoProcIntegrationDataAdapter.prototype.getXScaleCompleteness = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/completeness".format([ a.toString() ]));
}, AutoProcIntegrationDataAdapter.prototype.getXScaleRfactor = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/rfactor".format([ a.toString() ]));
}, AutoProcIntegrationDataAdapter.prototype.getXScaleISigma = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/isigma".format([ a.toString() ]));
}, AutoProcIntegrationDataAdapter.prototype.getXScaleCC2 = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/cc2".format([ a.toString() ]));
}, AutoProcIntegrationDataAdapter.prototype.getXScaleSigmaAno = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/sigmaano".format([ a.toString() ]));
}, AutoProcIntegrationDataAdapter.prototype.getXScaleWilson = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/wilson".format([ a.toString() ]));
}, AutoProcIntegrationDataAdapter.prototype.getXScaleAnnoCorrection = function(a) {
    return this.getUrl(connection, "/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/anomcorr".format([ a.toString() ]));
}, AutoProcIntegrationDataAdapter.prototype.getDownloadAttachmentUrl = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/autoproc/autoprocattachmentid/{0}/download".format([ a.toString() ]));
}, AutoProcIntegrationDataAdapter.prototype.getPhasingByAutoprocIds = function(a) {
    this.get("/{token}/proposal/{proposal}/mx/phasing/autoprocid/{0}/list".format([ a.toString() ]));
}, CrystalDataAdapter.prototype.get = DataAdapter.prototype.get, CrystalDataAdapter.prototype.post = DataAdapter.prototype.post, 
CrystalDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, CrystalDataAdapter.prototype.getCrystalsByProposalId = function() {
    this.get("/{token}/proposal/{proposal}/mx/crystal/list");
}, CrystalDataAdapter.prototype.getCrystalById = function(a) {
    this.get("/{token}/proposal/{proposal}/mx/crystal/{0}/get".format([ a.toString() ]));
}, DataCollectionDataAdapter.prototype.get = DataAdapter.prototype.get, DataCollectionDataAdapter.prototype.post = DataAdapter.prototype.post, 
DataCollectionDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, DataCollectionDataAdapter.prototype.getBySessionsId = function(a) {
    this.get("/{token}/proposal/{proposal}/mx/datacollection/session/{0}/list".format([ a.toString() ]));
}, DataCollectionDataAdapter.prototype.getByDataCollectionId = function(a) {
    this.get("/{token}/proposal/{proposal}/mx/datacollection/{0}/get".format([ a.toString() ]));
}, DataCollectionDataAdapter.prototype.getByAcronymList = function(a) {
    this.get("/{token}/proposal/{proposal}/mx/datacollection/protein_acronym/{0}/view".format([ a.toString() ]));
}, DataCollectionDataAdapter.prototype.getDataCollectionViewBySessionId = function(a) {
    this.get("/{token}/proposal/{proposal}/mx/datacollection/session/{0}/view".format([ a.toString() ]));
}, DataCollectionDataAdapter.prototype.getThumbNailById = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/image/{0}/thumbnail".format([ a ]));
}, DataCollectionDataAdapter.prototype.getImageById = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/image/{0}/get".format([ a ]));
}, DataCollectionDataAdapter.prototype.getWilsonPlot = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/datacollection/{0}/wilson".format([ a ]));
}, DataCollectionDataAdapter.prototype.getCrystalSnapshotByDataCollectionId = function(a, b) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/datacollection/{0}/crystalsnaphot/{1}/get".format([ a, b ]));
}, ProteinDataAdapter.prototype.get = DataAdapter.prototype.get, ProteinDataAdapter.prototype.post = DataAdapter.prototype.post, 
ProteinDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, ProteinDataAdapter.prototype.getProteinByProposalId = function() {
    this.get("/{token}/proposal/{proposal}/mx/protein/list");
}, WorkflowStepDataAdapter.prototype.get = DataAdapter.prototype.get, WorkflowStepDataAdapter.prototype.post = DataAdapter.prototype.post, 
WorkflowStepDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, WorkflowStepDataAdapter.prototype.getImageByWorkflowStepId = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/workflow/step/{0}/image".format([ a.toString() ]));
}, WorkflowStepDataAdapter.prototype.getHtmlByWorkflowStepId = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/workflow/step/{0}/html".format([ a.toString() ]));
}, WorkflowStepDataAdapter.prototype.getResultByWorkflowStepId = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/mx/workflow/step/{0}/result".format([ a.toString() ]));
}, WorkflowStepDataAdapter.prototype.getWorkflowstepByIdList = function(a) {
    this.get("/{token}/proposal/{proposal}/mx/workflow/step/{0}/list".format([ a.toString() ]));
}, AuthenticationDataAdapter.prototype.get = DataAdapter.prototype.get, AuthenticationDataAdapter.prototype.post = DataAdapter.prototype.post, 
AuthenticationDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, AuthenticationDataAdapter.prototype.authenticate = function(a, b, c) {
    var d = this, e = "ESRF";
    -1 != c.indexOf("embl-hamburg") && (e = "EMBL"), -1 != c.indexOf("192.109.31.39") && (e = "EMBL"), 
    $.ajax({
        url: c + "/authenticate?site=" + e,
        type: "post",
        data: {
            login: a,
            password: b
        },
        success: function(a) {
            d.onSuccess.notify(a);
        },
        error: function(a) {
            d.onError.notify(a);
        }
    });
}, DewarDataAdapter.prototype.get = DataAdapter.prototype.get, DewarDataAdapter.prototype.post = DataAdapter.prototype.post, 
DewarDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, DewarDataAdapter.prototype.saveDewar = function(a, b) {
    var c = "/{token}/proposal/{proposal}/shipping/{0}/dewar/save".format([ a ]);
    this.post(c, b);
}, DewarDataAdapter.prototype.removeDewar = function(a, b) {
    var c = "/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/remove".format([ a, b ]);
    this.get(c);
}, DewarDataAdapter.prototype.addDewar = function(a) {
    this.saveDewar(a, {});
}, ProposalDataAdapter.prototype.get = DataAdapter.prototype.get, ProposalDataAdapter.prototype.post = DataAdapter.prototype.post, 
ProposalDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, ProposalDataAdapter.prototype.getProposals = function() {
    this.get("/{token}/proposal/list");
}, ProposalDataAdapter.prototype.getDewarByProposalId = function() {
    this.get("/{token}/proposal/{proposal}/shipping/dewar/list");
}, ProposalDataAdapter.prototype.getProposalsInfo = function() {
    this.get("/{token}/proposal/{proposal}/technique/saxs/get");
}, ProposalDataAdapter.prototype.getProposalBySessionId = function(a) {
    this.get("/{token}/proposal/session/{0}/list".format([ a ]));
}, ProposalDataAdapter.prototype.update = function() {
    null != EXI && null != EXI.proposalManager && (this.onSuccess.attach(function(a, b) {
        localStorage.setItem("proposals", JSON.stringify(b));
    }), this.onSuccess._listeners.reverse()), this.getProposalsInfo();
}, SessionDataAdapter.prototype.get = DataAdapter.prototype.get, SessionDataAdapter.prototype.post = DataAdapter.prototype.post, 
SessionDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, SessionDataAdapter.prototype.getSessions = function() {
    this.get("/{token}/proposal/{proposal}/session/list");
}, SessionDataAdapter.prototype.getSessionsByDate = function(a, b) {
    this.get("/{token}/proposal/session/list?startdate={0}&enddate={1}".format([ a, b ]));
}, ShippingDataAdapter.prototype.get = DataAdapter.prototype.get, ShippingDataAdapter.prototype.post = DataAdapter.prototype.post, 
ShippingDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, ShippingDataAdapter.prototype.getShippings = function() {
    this.get("/{token}/proposal/{proposal}/shipping/list");
}, ShippingDataAdapter.prototype.getShipment = function(a) {
    this.get("/{token}/proposal/{proposal}/shipping/{0}/get".format([ a ]));
}, ShippingDataAdapter.prototype.getDewarsByShipmentId = function(a) {
    this.get("/{token}/proposal/{proposal}/shipping/{0}/dewar/list".format([ a ]));
}, ShippingDataAdapter.prototype.getLabContacts = function() {
    this.get("/{token}/proposal/{proposal}/shipping/labcontact/list");
}, ShippingDataAdapter.prototype.getScientists = function() {
    this.get("/{token}/proposal/{proposal}/shipping/labcontact/smis/list");
}, ShippingDataAdapter.prototype.getLabContactById = function(a) {
    this.get("/{token}/proposal/{proposal}/shipping/labcontact/{0}/get".format([ a ]));
}, ShippingDataAdapter.prototype.saveLabContact = function(a) {
    var b = "/{token}/proposal/{proposal}/shipping/labcontact/save";
    this.post(b, {
        labcontact: JSON.stringify(a)
    });
}, ShippingDataAdapter.prototype.saveShipment = function(a) {
    this.post("/{token}/proposal/{proposal}/shipping/save", a);
}, ShippingDataAdapter.prototype.addPuck = function(a, b) {
    this.get("/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/add".format([ a, b ]));
}, ShippingDataAdapter.prototype.getContainerById = function(a, b, c) {
    this.get("/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/get".format([ a, b, c ]));
}, ShippingDataAdapter.prototype.removeContainerById = function(a, b, c) {
    this.get("/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/remove".format([ a, b, c ]));
}, ShippingDataAdapter.prototype.saveContainer = function(a, b, c, d) {
    var e = "/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/save".format([ a, b, c ]);
    this.post(e, {
        puck: JSON.stringify(d)
    });
}, ShippingDataAdapter.prototype.getDewarLabelURL = function(a, b) {
    var c = EXI.credentialManager.getConnections()[0];
    return this.getUrl(c, "/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/labels".format([ a, b ]));
}, ProposalManager.prototype.get = function(a) {
    if (null == localStorage.getItem("proposals") || a) {
        var b = function(a, b) {
            localStorage.setItem("proposals", JSON.stringify(b));
        };
        EXI.getDataAdapter({
            async: !1,
            onSuccess: b
        }).proposal.proposal.getProposalsInfo();
    }
    return JSON.parse(localStorage.getItem("proposals"));
}, ProposalManager.prototype.clear = function() {
    localStorage.removeItem("proposals");
}, ProposalManager.prototype.getSessions = function() {
    if (null == localStorage.getItem("sessions")) {
        var a = function(a, b) {
            localStorage.setItem("sessions", JSON.stringify(b));
        };
        EXI.getDataAdapter({
            async: !1,
            onSuccess: a
        }).proposal.session.getSessions();
    }
    return JSON.parse(localStorage.getItem("sessions"));
}, ProposalManager.prototype.getFutureSessions = function() {
    for (var a = this.getSessions(), b = moment(), c = [], d = 0; d < a.length; d++) b.diff(a[d].startDate) < 0 && c.push(a[d]);
    return c;
}, ProposalManager.prototype.getBufferColors = function() {
    return [ "#ffffcc", "#c7e9b4", "#7fcdbb", "#41b6c4", "#2c7fb8", "#253494" ];
}, ProposalManager.prototype.getLabcontacts = function() {
    var a = this.get();
    return a[0].labcontacts;
}, ProposalManager.prototype.getLabcontactById = function(a) {
    for (var b = this.getLabcontacts(), c = 0; c < b.length; c++) if (b[c].labContactId == a) return b[c];
}, ProposalManager.prototype.getPlateTypeById = function(a) {
    for (var b = this.getPlateTypes(), c = 0; c < b.length; c++) if (b[c].plateTypeId == a) return b[c];
    return null;
}, ProposalManager.prototype.getPlateTypes = function() {
    var a = this.get();
    return a[0].plateTypes;
}, ProposalManager.prototype.getPlateByFlavour = function() {
    var a = this.get()[0].plateTypes;
    return [ a[0], a[2], a[3] ];
}, ProposalManager.prototype.getBufferById = function(a) {
    for (var b = this.get(), c = 0; c < b.length; c++) for (var d = 0; d < b[c].buffers.length; d++) if (b[c].buffers[d].bufferId == a) return b[c].buffers[d];
}, ProposalManager.prototype.getMacromoleculeById = function(a) {
    for (var b = this.get(), c = 0; c < b.length; c++) for (var d = 0; d < b[c].macromolecules.length; d++) if (b[c].macromolecules[d].macromoleculeId == a) return b[c].macromolecules[d];
}, ProposalManager.prototype.getMacromoleculeByAcronym = function(a) {
    for (var b = this.get(), c = 0; c < b.length; c++) for (var d = 0; d < b[c].macromolecules.length; d++) if (b[c].macromolecules[d].acronym == a) return b[c].macromolecules[d];
}, ProposalManager.prototype.getStockSolutionById = function(a) {
    for (var b = this.get(), c = 0; c < b.length; c++) for (var d = 0; d < b[c].stockSolutions.length; d++) if (b[c].stockSolutions[d].stockSolutionId == a) return b[c].stockSolutions[d];
}, ProposalManager.prototype.getBuffers = function() {
    for (var a = this.get(), b = [], c = 0; c < a.length; c++) b = b.concat(a[c].buffers);
    return b;
}, ProposalManager.prototype.getMacromolecules = function() {
    for (var a = this.get(), b = [], c = 0; c < a.length; c++) b = b.concat(a[c].macromolecules);
    return b;
}, ProposalManager.prototype.getProposals = function() {
    for (var a = this.get(), b = [], c = 0; c < a.length; c++) a[c].proposal[0].proposal = a[c].proposal[0].code + a[c].proposal[0].number, 
    b = b.concat(a[c].proposal);
    return b;
}, ProposalManager.prototype.getProposalById = function(a) {
    for (var b = this.get(), c = [], d = 0; d < b.length; d++) if (b[d].proposal[0].proposalId == a) return b[d].proposal[0];
    return c;
}, ProposalManager.prototype.getStockSolutions = function() {
    return this.get()[0].stockSolutions;
}, ProposalManager.prototype.getProteins = function() {
    return this.get()[0].proteins;
}, ProposalManager.prototype.getCrystals = function() {
    return this.get()[0].crystals;
}, ProposalManager.prototype.getProteinByAcronym = function(a) {
    for (var b = this.getProteins(), c = 0; c < b.length; c++) if (b[c].acronym == a) return b[c];
    return null;
}, ProposalManager.prototype.getCrystalsByAcronym = function(a) {
    for (var b = this.getCrystals(), c = [], d = 0; d < b.length; d++) b[d].protein.acronym == a && (c = c.concat(b[d]));
    return c;
}, ProposalManager.prototype.getStockSolutionsBySpecimen = function(a, b) {
    for (var c = [], d = this.getStockSolutions(), e = 0; e < d.length; e++) d[e].macromoleculeId == a && d[e].bufferId == b && c.push(d[e]);
    return c;
}, ProposalManager.prototype.getUnpackedStockSolutions = function() {
    for (var a = this.getStockSolutions(), b = [], c = 0; c < a.length; c++) null == a[c].boxId && b.push(a[c]);
    return b;
}, ProposalManager.prototype.getStockSolutionsByDewarId = function(a) {
    for (var b = this.getStockSolutions(), c = [], d = 0; d < b.length; d++) b[d].boxId == a && c.push(b[d]);
    return c;
}, BufferSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, BufferSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
BufferSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, BufferSaxsDataAdapter.prototype.getBuffers = function() {
    this.get("/{token}/proposal/{proposal}/saxs/buffer/list");
}, BufferSaxsDataAdapter.prototype.saveBuffer = function(a) {
    var b = "/{token}/proposal/{proposal}/saxs/buffer/save";
    this.post(b, {
        buffer: JSON.stringify(a)
    });
}, DataCollectionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, DataCollectionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
DataCollectionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByMacromoleculeAcronym = function(a) {
    this.get("/{token}/proposal/{proposal}/saxs/datacollection/macromoleculeAcronym/{0}/list".format([ a ]));
}, DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByKey = function(a, b) {
    this.get("/{token}/proposal/{proposal}/saxs/datacollection/{0}/{1}/list".format([ a, b.toString() ]));
}, DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByDataCollectionId = function(a) {
    this.get("/{token}/proposal/{proposal}/saxs/datacollection/dataCollectionId/{0}/list".format([ a ]));
}, DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByIdList = function(a) {
    this.get("/{token}/proposal/{proposal}/saxs/datacollection/{0}/list".format([ a ]));
}, DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByExperimentId = function(a) {
    this.get("/{token}/proposal/{proposal}/saxs/datacollection/experimentId/{0}/list".format([ a ]));
}, Experiment.prototype.getSpecimenColorByBufferId = function(a) {
    return this.specimenBuffersColors[a];
}, Experiment.prototype.setMacromoleculesColors = function() {
    var a = [ "#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494" ];
    this.macromoleculeColors = {};
    for (var b = this.getMacromolecules(), c = 0; c < b.length; c++) this.macromoleculeColors[b[c].macromoleculeId] = a[c % a.length];
}, Experiment.prototype.getHPLCMacromolecule = function() {
    var a = this.getDataCollections();
    if (a.length > 0) for (var b = 0; 1 > b; b++) {
        var c = a[b].measurementtodatacollection3VOs;
        if (null != c) for (var d = 0; d < c.length; d++) if (2 == c[d].dataCollectionOrder) return this.getSampleById(this.getMeasurementById(c[d].measurementId).specimenId).macromolecule3VO;
    }
}, Experiment.prototype.getSpecimenColors = function() {
    for (var a = this.getSamples(), b = [], c = 0; c < a.length; c++) null === a[c].macromolecule3VO && b.push(a[c]);
    var d = {}, e = EXI.proposalManager.getBufferColors();
    for (c = 0; c < b.length; c++) d[b[c].specimenId] = e[c % e.length];
    return d;
}, Experiment.prototype.getBuffers = function() {
    var a = this.getSamples(), b = {}, c = [];
    if (null !== a) for (var d = 0; d < a.length; d++) null === b[a[d].bufferId] && (c.push(BIOSAXS.proposal.getBufferById(a[d].bufferId)), 
    b[a[d].bufferId] = !0);
    return c;
}, Experiment.prototype.getBufferById = function(a) {
    return EXI.proposalManager.getBufferById(a);
}, Experiment.prototype.getStockSolutions = function() {
    return this.json.stockSolution3VOs;
}, Experiment.prototype.getStockSolutionById = function(a) {
    for (var b = this.getStockSolutions(), c = 0; c < b.length; c++) if (b[c].stockSolutionId == a) return b[c];
}, Experiment.prototype.getMacromolecules = function() {
    for (var a = this.getSamples(), b = {}, c = [], d = 0; d < a.length; d++) null != a[d].macromolecule3VO && null == b[a[d].macromolecule3VO.macromoleculeId] && (c.push(a[d].macromolecule3VO), 
    b[a[d].macromolecule3VO.macromoleculeId] = !0);
    return c;
}, Experiment.prototype.getMeasurementsWithSubtractionAssociated = function() {
    for (var a = this.getMeasurements(), b = [], c = 0; c < a.length; c++) {
        var d = a[c];
        null !== d.run3VO && b.push(d);
    }
    return b;
}, Experiment.prototype.getSamples = function() {
    return this.json.samples3VOs;
}, Experiment.prototype.getSampleById = function(a) {
    return this.getSpecimenById(a);
}, Experiment.prototype.getSpecimenById = function(a) {
    for (var b = this.getSamples(), c = 0; c < b.length; c++) if (b[c].specimenId == a) return b[c];
    return null;
}, Experiment.prototype.getSpecimenByDataCollectionId = function(a) {
    for (var b = this.getDataCollectionById(a), c = {}, d = [], e = 0; e < b.measurementtodatacollection3VOs.length; e++) {
        var f = this.getMeasurementById(b.measurementtodatacollection3VOs[e].measurementId);
        null == c[f.specimenId] && (d.push(f), c[f.specimenId] = !0);
    }
    return d;
}, Experiment.prototype.setSpecimenById = function(a) {
    for (var b = 0; b < this.json.samples3VOs.length; b++) if (this.json.samples3VOs[b].specimenId == a.specimenId) return void (this.json.samples3VOs[b] = a);
    console.log("Specimen with id: " + a.specimenId + " not found");
}, Experiment.prototype.setMeasurement = function(a) {
    for (var b = this.getMeasurements(), c = 0; c < b.length; c++) if (b[c].measurementId == a.measurementId) return void (b[c] = a);
}, Experiment.prototype.getConcentrations = function() {
    for (var a = {}, b = this.getMeasurements(), c = 0; c < b.length; c++) null != b[c].concentration && (a[b[c].concentration] = [ b[c].concentration ]);
    var d = [];
    for (var e in a) "null" != e && d.push(e);
    return d;
}, Experiment.prototype.getConcentrationsBysample = function(a) {
    for (var b = {}, c = this.getSamples(), d = 0; d < c.length; d++) null != c[d].macromolecule3VO && c[d].macromolecule3VO.macromoleculeId == a.macromolecule3VO.macromoleculeId && null != c[d].concentration && (b[c[d].concentration] = [ c[d].concentration ]);
    var e = [];
    for (var f in b) "null" != f && e.push(f);
    return e;
}, Experiment.prototype.setSpecimen = function(a) {
    for (var b = this.getBuffers(), c = 0; c < b.length; c++) for (var d = b[c], e = 0; e < d.specimen3VOs.length; e++) {
        var f = d.specimen3VOs[e];
        if (f.specimenId == a.specimenId) return d.specimen3VOs[e] = a, d;
    }
}, Experiment.prototype.getSamplePlates = function() {
    return this.json.samplePlate3VOs;
}, Experiment.prototype.getSamplePlateById = function(a) {
    for (var b = this.getSamplePlates(), c = 0; c < b.length; c++) if (b[c].samplePlateId == a) return b[c];
}, Experiment.prototype.getSamplePlateBySlotPositionColumn = function(a) {
    for (var b = this.getSamplePlates(), c = 0; c < b.length; c++) if (b[c].slotPositionColumn == a) return b[c];
}, Experiment.prototype.getSpecimenByPosition = function(a, b, c) {
    return this.getSampleByPosition();
}, Experiment.prototype.getSpecimensBySamplePlateId = function(a) {
    for (var b = this.getSamples(), c = [], d = 0; d < b.length; d++) null != b[d].sampleplateposition3VO && b[d].sampleplateposition3VO.samplePlateId == a && c.push(b[d]);
    return c;
}, Experiment.prototype.getSampleByPosition = function(a, b, c) {
    for (var d = this.getSamples(), e = [], f = 0; f < d.length; f++) null != d[f].sampleplateposition3VO && d[f].sampleplateposition3VO.samplePlateId == a && d[f].sampleplateposition3VO.rowNumber == b && d[f].sampleplateposition3VO.columnNumber == c && e.push(d[f]);
    return e;
}, Experiment.prototype.getPlateGroups = function() {
    for (var a = this.getSamplePlates(), b = [], c = {}, d = 0; d < a.length; d++) if (null != a[d].plategroup3VO) {
        var e = a[d].plategroup3VO.plateGroupId;
        null == c[e] && (b.push(a[d].plategroup3VO), c[e] = !0);
    }
    return b;
}, Experiment.prototype.getPlatesByPlateGroupId = function(a) {
    for (var b = this.getSamplePlates(), c = [], d = 0; d < b.length; d++) null != b[d].plategroup3VO && b[d].plategroup3VO.plateGroupId == a && c.push(b[d]);
    return c;
}, Experiment.prototype.getMeasurements = function() {
    var a = [], b = this.getSamples();
    if (null == b) return [];
    for (var c = 0; c < b.length; c++) for (var d = b[c], e = 0; e < d.measurements.length; e++) a.push(d.measurements[e]);
    return a;
}, Experiment.prototype.getMeasurementById = function(a) {
    for (var b = this.getMeasurements(), c = 0; c < b.length; c++) if (b[c].measurementId == a) return b[c];
    return null;
}, Experiment.prototype.getMeasurementByDataCollectionId = function(a) {
    for (var b = [], c = this.getDataCollectionById(a), d = 0; d < c.measurementtodatacollection3VOs.length; d++) b.push(this.getMeasurementById(c.measurementtodatacollection3VOs[d].measurementId));
    return b;
}, Experiment.prototype.getDataCollections = function() {
    for (var a = this.json.dataCollections, b = [], c = 0; c < a.length; c++) 0 != a[c].measurementtodatacollection3VOs.length && b.push(a[c]);
    return b;
}, Experiment.prototype.getDataCollectionsBySpecimenId = function(a) {
    for (var b = this.getMeasurementsBySpecimenId(a), c = [], d = {}, e = 0; e < b.length; e++) for (var f = b[e], g = this.getDataCollectionByMeasurementId(f.measurementId), h = 0; h < g.length; h++) null == d[g[h].dataCollectionId] && (d[g[h].dataCollectionId] = !0, 
    c.push(g[h]));
    return c;
}, Experiment.prototype.getMeasurementsBySpecimenId = function(a) {
    for (var b = this.getMeasurements(), c = [], d = 0; d < b.length; d++) b[d].specimenId == a && c.push(b[d]);
    return c;
}, Experiment.prototype.getDataCollectionByMeasurementId = function(a) {
    function b(a, b) {
        return a.dataCollectionOrder - b.dataCollectionOrder;
    }
    for (var c = this.getDataCollections(), d = [], e = 0; e < c.length; e++) if (0 != c[e].measurementtodatacollection3VOs.length) for (var f = 0; f < c[e].measurementtodatacollection3VOs.length; f++) {
        var g = c[e].measurementtodatacollection3VOs[f];
        g.measurementId == a && (c[e].measurementtodatacollection3VOs.sort(b), d.push(c[e]));
    }
    return d;
}, Experiment.prototype.getSubtractionById = function(a) {
    for (var b = this.getDataCollections(), c = 0; c < b.length; c++) if (null != b[c].substraction3VOs && b[c].substraction3VOs.length > 0) for (var d = 0; d < b[c].substraction3VOs.length; d++) if (b[c].substraction3VOs[d].subtractionId == a) return b[c].substraction3VOs[d];
    return null;
}, Experiment.prototype.getDataCollectionById = function(a) {
    for (var b = this.json.dataCollections, c = 0; c < b.length; c++) if (b[c].dataCollectionId == a) return b[c];
}, Experiment.prototype.getVolumeToLoadBySampleId = function(a) {
    var b = this.getSpecimenById(a);
    if (null != b) {
        for (var c = 0, d = 0; d < b.measurements.length; d++) c += Number(b.measurements[d].volumeToLoad);
        return c;
    }
}, ExperimentList.prototype.getSpecimenColorByBufferId = function(a) {
    for (var b = 0; b < this.experiments.length; b++) {
        var c = this.experiments[b], d = c.getSpecimenColorByBufferId(a);
        if (null != d) return d;
    }
    return "black";
}, ExperimentList.prototype.getColorByMacromoleculeId = function(a) {
    for (var b = 0; b < this.experiments.length; b++) {
        var c = this.experiments[b], d = c.getColorByMacromoleculeId(a);
        if (null != d) return d;
    }
    return "black";
}, ExperimentList.prototype.getMeasurements = function() {
    for (var a = [], b = 0; b < this.experiments.length; b++) for (var c = this.experiments[b], d = c.getMeasurements(), e = 0; e < d.length; e++) a.push(d[e]);
    return a;
}, ExperimentList.prototype.getMeasurementByDataCollectionId = function(a) {
    for (var b = 0; b < this.experiments.length; b++) {
        var c = this.experiments[b].getMeasurementByDataCollectionId(a);
        if (0 != c.length) return c;
    }
    return [];
}, ExperimentList.prototype.getMergesByMeasurements = function(a) {
    for (var b = [], c = 0; c < a.length; c++) if (null != a[c].merge3VOs) for (var d = 0; d < a[c].merge3VOs.length; d++) b.push(a[c].merge3VOs[d]);
    return b;
}, ExperimentList.prototype.getSamplePlateById = function(a) {
    for (var b = 0; b < this.experiments.length; b++) {
        var c = this.experiments[b].getSamplePlateById(a);
        if (null != c) return c;
    }
    return null;
}, ExperimentList.prototype.getMergesByDataCollectionId = function(a) {
    return this.getMergesByMeasurements(this.getMeasurementByDataCollectionId(a));
}, ExperimentList.prototype.getMerges = function() {
    return this.getMergesByMeasurements(this.getMeasurements());
}, ExperimentList.prototype.getDataCollectionById = function(a) {
    for (var b = [], c = 0; c < this.experiments.length; c++) {
        var d = this.experiments[c], e = d.getDataCollectionById(a);
        if (null != e) return e;
    }
    return b;
}, ExperimentList.prototype.getDataCollectionByMeasurementId = function(a) {
    for (var b = 0; b < this.experiments.length; b++) {
        var c = this.experiments[b], d = c.getDataCollectionByMeasurementId(a);
        if (null != d) return d;
    }
    return null;
}, ExperimentList.prototype.getMeasurementsNotCollected = function() {
    for (var a = [], b = 0; b < this.experiments.length; b++) for (var c = this.experiments[b], d = c.getMeasurements(), e = 0; e < d.length; e++) null == d[e].run3VO && a.push(d[e]);
    return a;
}, ExperimentList.prototype.getMeasurementsCollected = function() {
    for (var a = [], b = 0; b < this.experiments.length; b++) for (var c = this.experiments[b], d = c.getMeasurements(), e = 0; e < d.length; e++) null != d[e].run3VO && a.push(d[e]);
    return a;
}, ExperimentList.prototype.getMeasurementById = function(a) {
    for (var b = 0; b < this.experiments.length; b++) {
        var c = this.experiments[b].getMeasurementById(a);
        if (null != c) return c;
    }
    return null;
}, ExperimentList.prototype.getBufferById = function(a) {
    for (var b = 0; b < this.experiments.length; b++) {
        var c = this.experiments[b].getBufferById(a);
        if (null != c) return c;
    }
    return null;
}, ExperimentList.prototype.getSampleById = function(a) {
    for (var b = 0; b < this.experiments.length; b++) {
        var c = this.experiments[b].getSampleById(a);
        if (null != c) return c;
    }
    return null;
}, ExperimentList.prototype.getSamplesByCondition = function(a, b) {
    for (var c = [], d = 0; d < this.experiments.length; d++) for (var e = this.experiments[d].getSamples(), f = 0; f < e.length; f++) null != e[f].macromolecule3VO && e[f].macromolecule3VO.macromoleculeId == a && e[f].bufferId == b && c.push(e[f]);
    return c;
}, ExperimentList.prototype.getFrames = function(a) {
    for (var b = [], c = 0; c < a.length; c++) {
        var d = a[c];
        if (null != d.framelist3VO && null != d.framelist3VO.frametolist3VOs) for (var e = 0; e < d.framelist3VO.frametolist3VOs.length; e++) {
            var f = d.framelist3VO.frametolist3VOs[e].frame3VO;
            null != f && b.push(f);
        }
    }
    return b;
}, ExperimentSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, ExperimentSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
ExperimentSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, ExperimentSaxsDataAdapter.prototype.getByExperimentByKey = function(a, b) {
    this.get("/{token}/proposal/{proposal}/saxs/experiment/{0}/{1}/list".format([ a.toString(), b.toString() ]));
}, ExperimentSaxsDataAdapter.prototype.getExperiments = function() {
    this.get("/{token}/proposal/{proposal}/saxs/experiment/list");
}, ExperimentSaxsDataAdapter.prototype.getExperimentById = function(a) {
    this.get("/{token}/proposal/{proposal}/saxs/experiment/{0}/get".format([ a ]));
}, ExperimentSaxsDataAdapter.prototype.getExperimentsBySessionId = function(a) {
    this.get("/{token}/proposal/{proposal}/saxs/experiment/session/{0}/list".format([ a ]));
}, ExperimentSaxsDataAdapter.prototype.getByExperimentId = function(a) {
    this.get("/{token}/proposal/{proposal}/saxs/experiment/experimentId/{0}/list".format([ a ]));
}, ExperimentSaxsDataAdapter.prototype.saveExperiment = function(a, b, c) {
    var d = "/{token}/proposal/{proposal}/saxs/experiment/{0}/save".format([ a ]);
    this.post(d, {
        name: b,
        comments: c
    });
}, FrameSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, FrameSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
FrameSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, FrameSaxsDataAdapter.prototype.getFramesByAverageId = function(a) {
    this.get("/{0}/saxs/{1}/frame/average/{0}/list".format([ a.toString() ]));
}, FrameSaxsDataAdapter.prototype.getFramesURL = function(a, b, c, d, e, f) {
    null == a && (a = []), null == b && (b = []), null == c && (c = []), null == d && (d = []), 
    null == e && (e = []), null == f && (f = []);
    var g = EXI.credentialManager.getConnections()[0];
    return g.url + "/{0}/proposal/{1}/saxs/frame/datplot?frame={2}&average={3}&subtracted={4}&sampleaverage={5}&bufferaverage={6}&models={7}".format([ g.token, g.user, a.toString(), b.toString(), c.toString(), d.toString(), e.toString(), f.toString() ]);
}, HPLCSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, HPLCSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
HPLCSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, HPLCSaxsDataAdapter.prototype.getHPLCOverviewByExperimentId = function(a) {
    this.get("/{token}/proposal/{proposal}/saxs/experiment/{0}/hplc/overview".format([ a ]));
}, HPLCSaxsDataAdapter.prototype.getHPLCFramesScatteringURL = function(a, b) {
    var c = EXI.credentialManager.getConnections()[0];
    return this.getUrl(c, "/{token}/proposal/{proposal}/saxs/experiment/{0}/hplc/frame/{1}/get?operation=log".format([ a, b.toString() ]));
}, MacromoleculeSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, MacromoleculeSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
MacromoleculeSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, MacromoleculeSaxsDataAdapter.prototype.saveMacromolecule = function(a) {
    var b = "/{token}/proposal/{proposal}/saxs/macromolecule/save";
    this.post(b, {
        macromolecule: JSON.stringify(a)
    });
}, MacromoleculeSaxsDataAdapter.prototype.getMacromolecules = function() {
    this.get("/{token}/proposal/{proposal}/saxs/macromolecule/list");
}, MacromoleculeSaxsDataAdapter.prototype.getContactDescriptionUploadFileURL = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/saxs/macromolecule/{0}/contactfile/upload".format([ a ]));
}, MacromoleculeSaxsDataAdapter.prototype.removeContactDescriptionFile = function(a) {
    this.get("/{token}/proposal/{proposal}/saxs/macromolecule/{0}/contactfile/remove".format([ a ]));
}, MacromoleculeSaxsDataAdapter.prototype.getAddPDBURL = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/upload".format([ a ]));
}, MacromoleculeSaxsDataAdapter.prototype.removeStructure = function(a, b) {
    this.get("/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/{1}/remove".format([ a, b ]));
}, MacromoleculeSaxsDataAdapter.prototype.saveStructure = function(a, b, c, d) {
    var e = "/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/{1}/save".format([ a, b ]);
    this.post(e, {
        symmetry: d,
        multiplicity: c
    });
}, MeasurementSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, MeasurementSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
MeasurementSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, MeasurementSaxsDataAdapter.prototype.saveMeasurement = function(a) {
    var b = "/{token}/proposal/{proposal}/saxs/measurement/save";
    this.post(b, {
        measurement: JSON.stringify(a)
    });
}, MeasurementSaxsDataAdapter.prototype.removeMeasurement = function(a) {
    var b = "/{token}/proposal/{proposal}/saxs/measurement/{0}/remove".format([ a.measurementId ]);
    this.get(b);
}, MeasurementSaxsDataAdapter.prototype.sortMeasurements = function(a, b) {
    this.get("/{token}/proposal/{proposal}/saxs/measurement/experiment/{0}/type/{1}/sort".format([ a, b ]));
}, ModelSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, ModelSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
ModelSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, ModelSaxsDataAdapter.prototype.saveMeasurement = function(a) {
    var b = "/{token}/proposal/{proposal}/saxs/measurement/save";
    this.post(b, {
        measurement: JSON.stringify(a)
    });
}, ModelSaxsDataAdapter.prototype.removeMeasurement = function(a) {
    var b = "/{token}/proposal/{proposal}/saxs/measurement/{0}/remove".format([ a.measurementId ]);
    this.get(b);
}, ModelSaxsDataAdapter.prototype.getPDB = function(a, b) {
    var c = "/{token}/proposal/{proposal}/saxs/modeling/pdb/get";
    this.post(c, {
        models: JSON.stringify(a)
    });
}, SpecimenSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, SpecimenSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
SpecimenSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, SpecimenSaxsDataAdapter.prototype.saveSpecimen = function(a) {
    var b = "/{token}/proposal/{proposal}/saxs/specimen/save";
    this.post(b, {
        specimen: JSON.stringify(a)
    });
}, SpecimenSaxsDataAdapter.prototype.mergeSpecimens = function(a, b) {
    var c = "/{token}/proposal/{proposal}/saxs/specimen/merge";
    this.post(c, {
        sourceSpecimenId: a,
        targetSpecimenId: b
    });
}, StockSolutionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, StockSolutionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
StockSolutionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, StockSolutionSaxsDataAdapter.prototype.getStockSolutions = function() {
    this.get("/{token}/proposal/{proposal}/saxs/stocksolution/list");
}, StockSolutionSaxsDataAdapter.prototype.saveStockSolution = function(a) {
    var b = "/{token}/proposal/{proposal}/saxs/stocksolution/save";
    this.post(b, {
        stocksolution: JSON.stringify(a)
    });
}, SubtractionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, SubtractionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
SubtractionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, SubtractionSaxsDataAdapter.prototype.getSubtractionsBySubtractionIdList = function(a) {
    this.get("/{token}/proposal/{proposal}/saxs/subtraction/{0}/list".format([ a.toString() ]));
}, SubtractionSaxsDataAdapter.prototype.getImage = function(a, b) {
    return this.getUrl("/{token}/proposal/{proposal}/saxs/subtraction/{0}/image/{1}".format([ a, b ]));
}, SubtractionSaxsDataAdapter.prototype.getZip = function(a) {
    return this.getUrl("/{token}/proposal/{proposal}/saxs/subtraction/{0}/zip".format([ a ]));
}, TemplateSaxsDataAdapter.prototype.get = DataAdapter.prototype.get, TemplateSaxsDataAdapter.prototype.post = DataAdapter.prototype.post, 
TemplateSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl, TemplateSaxsDataAdapter.prototype.getTemplateSourceFile = function(a, b) {
    return this.getUrl("/{token}/proposal/{proposal}/saxs/experiment/{0}/samplechanger/type/{1}/template".format([ a, b ]));
}, TemplateSaxsDataAdapter.prototype.saveTemplate = function(a, b, c, d) {
    var e = "/{token}/proposal/{proposal}/saxs/experiment/save";
    this.post(e, {
        name: a,
        comments: b,
        experimentId: d,
        measurements: c.toString()
    });
};